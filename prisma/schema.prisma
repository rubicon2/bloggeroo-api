// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  password  String
  isAdmin   Boolean   @default(false)
  isBanned  Boolean   @default(false)
  blogs     Blog[]
  comments  Comment[]
}

model Blog {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // If publishedAt is null, then the blog is unpublished.
  publishedAt DateTime?
  title       String
  body        String
  comments    Comment[]
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Comment {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  text            String
  replies         Comment[] @relation("replies")
  parentCommentId String?
  parentComment   Comment?  @relation("replies", fields: [parentCommentId], references: [id])
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id])
  blogId          String
  blog            Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model RevokedToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
}
